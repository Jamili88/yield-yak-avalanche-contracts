{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/BalancesOfHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract BalancesOfHelper {\n\n  constructor() {}\n\n  /**\n   * @notice Fetch many token balances for a single account\n   * @param account account\n   * @param tokenAddresses list of token addresses\n   */\n  function accountBalancesOf(address account, address[] calldata tokenAddresses) public view returns (uint[] memory) {\n    uint[] memory balances;\n    for (uint i = 0; i < tokenAddresses.length; i++) {\n        uint balance = IERC20(tokenAddresses[i]).balanceOf(account);\n        balances[i] = balance;\n    }\n    return balances;\n  }\n\n  /**\n   * @notice Fetch many token balances for a many accounts\n   * @param accounts list of accounts\n   * @param tokenAddresses list of token addresses\n   */\n  function accountsBalancesOf(address[] calldata accounts, address[] calldata tokenAddresses) public view returns (uint[] memory) {\n    require(accounts.length == tokenAddresses.length, \"not same length\");\n    uint[] memory balances;\n    for (uint i = 0; i < tokenAddresses.length; i++) {\n        uint balance = IERC20(tokenAddresses[i]).balanceOf(accounts[i]);\n        balances[i] = balance;\n    }\n    return balances;\n  }\n\n  /**\n   * @notice Fetch a token balance for many accounts\n   * @param accounts list of accounts\n   * @param tokenAddress token addresses\n   */\n  function accountsBalanceOf(address[] calldata accounts, address tokenAddress) public view returns (uint[] memory) {\n    uint[] memory balances;\n    for (uint i = 0; i < accounts.length; i++) {\n        uint balance = IERC20(tokenAddress).balanceOf(accounts[i]);\n        balances[i] = balance;\n    }\n    return balances;\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}