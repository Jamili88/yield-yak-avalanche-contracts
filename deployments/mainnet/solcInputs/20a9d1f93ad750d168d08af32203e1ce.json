{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/PairHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IZEROPair.sol\";\nimport \"../interfaces/IERC20.sol\";\n\ncontract PairHelper {\n\n  struct PairInfo {\n    string symbol;\n    uint totalSupply;\n    address token0;\n    address token1;\n    string token0Symbol;\n    string token1Symbol;\n    uint reserve0;\n    uint reserve1;\n  }\n\n  constructor() {}\n\n  function pairInfo(address pairAddress) public view returns (PairInfo memory) {\n    IZEROPair pair = IZEROPair(pairAddress);\n    PairInfo memory info;\n    info.symbol = pair.symbol();\n    info.totalSupply = pair.totalSupply();\n    info.token0 = pair.token0();\n    info.token1 = pair.token1();\n\n    info.token0Symbol = IERC20(info.token0).symbol();\n    info.token1Symbol = IERC20(info.token1).symbol();\n    \n    (uint reserve0, uint reserve1, ) = pair.getReserves();\n    info.reserve0 = reserve0;\n    info.reserve1 = reserve1;\n    return info;\n  }\n}"
    },
    "contracts/interfaces/IZEROPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface IZEROPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/helpers/BalancesOfHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IERC20.sol\";\n\ncontract BalancesOfHelper {\n\n  constructor() {}\n\n  /**\n   * @notice Fetch many token balances for a single account\n   * @param account account\n   * @param tokenAddresses list of token addresses\n   */\n  function accountBalancesOf(address account, address[] calldata tokenAddresses) public view returns (uint[] memory) {\n    uint[] memory balances;\n    for (uint i; i < tokenAddresses.length; i++) {\n        uint balance = IERC20(tokenAddresses[i]).balanceOf(account);\n        balances[i] = balance;\n    }\n    return balances;\n  }\n\n  /**\n   * @notice Fetch many token balances for a many accounts\n   * @param accounts list of accounts\n   * @param tokenAddresses list of token addresses\n   */\n  function accountsBalancesOf(address[] calldata accounts, address[] calldata tokenAddresses) public view returns (uint[] memory) {\n    require(accounts.length == tokenAddresses.length, \"not same length\");\n    uint[] memory balances;\n    for (uint i; i < tokenAddresses.length; i++) {\n        uint balance = IERC20(tokenAddresses[i]).balanceOf(accounts[i]);\n        balances[i] = balance;\n    }\n    return balances;\n  }\n\n  /**\n   * @notice Fetch a token balance for many accounts\n   * @param accounts list of accounts\n   * @param tokenAddress token addresses\n   */\n  function accountsBalanceOf(address[] calldata accounts, address tokenAddress) public view returns (uint[] memory) {\n    uint[] memory balances;\n    for (uint i; i < accounts.length; i++) {\n        uint balance = IERC20(tokenAddress).balanceOf(accounts[i]);\n        balances[i] = balance;\n    }\n    return balances;\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}