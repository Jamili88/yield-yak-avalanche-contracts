{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/PairHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\ninterface IPair {\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\ncontract PairHelper {\n\n  struct PairInfo {\n    string symbol;\n    uint totalSupply;\n    address token0;\n    address token1;\n    string token0Symbol;\n    string token1Symbol;\n    uint token0Decimals;\n    uint token1Decimals;\n    uint reserve0;\n    uint reserve1;\n  }\n\n  constructor() {}\n\n  function pairInfo(address pairAddress) public view returns (PairInfo memory) {\n    IPair pair = IPair(pairAddress);\n    PairInfo memory info;\n    info.symbol = pair.symbol();\n    info.totalSupply = pair.totalSupply();\n    info.token0 = pair.token0();\n    info.token1 = pair.token1();\n\n    info.token0Symbol = IPair(info.token0).symbol();\n    info.token1Symbol = IPair(info.token1).symbol();\n\n    info.token0Decimals = IPair(info.token0).decimals();\n    info.token1Decimals = IPair(info.token1).decimals();\n    \n    (uint reserve0, uint reserve1, ) = pair.getReserves();\n    info.reserve0 = reserve0;\n    info.reserve1 = reserve1;\n    return info;\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}