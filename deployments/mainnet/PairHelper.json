{
  "address": "0x3189c01C933Ab5B7CCfc9873604381D835BF13D2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "pairInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "token0Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairHelper.PairInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xffbea5f24c29b64a6078456b20c8f9cf08adc797f26af64e3f8b9b1786fc29b7",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x3189c01C933Ab5B7CCfc9873604381D835BF13D2",
    "transactionIndex": 0,
    "gasUsed": "605731",
    "logsBloom": "0x
    "blockHash": "0xe11a7654a728b7bb8c32ac7b46af53b0060317bbc3823bb01726347e32a9ae2b",
    "transactionHash": "0xffbea5f24c29b64a6078456b20c8f9cf08adc797f26af64e3f8b9b1786fc29b7",
    "logs": [],
    "blockNumber": 694571,
    "cumulativeGasUsed": "605731",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "20a9d1f93ad750d168d08af32203e1ce",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"pairInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"internalType\":\"struct PairHelper.PairInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/PairHelper.sol\":\"PairHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/helpers/PairHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IZEROPair.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract PairHelper {\\n\\n  struct PairInfo {\\n    string symbol;\\n    uint totalSupply;\\n    address token0;\\n    address token1;\\n    string token0Symbol;\\n    string token1Symbol;\\n    uint reserve0;\\n    uint reserve1;\\n  }\\n\\n  constructor() {}\\n\\n  function pairInfo(address pairAddress) public view returns (PairInfo memory) {\\n    IZEROPair pair = IZEROPair(pairAddress);\\n    PairInfo memory info;\\n    info.symbol = pair.symbol();\\n    info.totalSupply = pair.totalSupply();\\n    info.token0 = pair.token0();\\n    info.token1 = pair.token1();\\n\\n    info.token0Symbol = IERC20(info.token0).symbol();\\n    info.token1Symbol = IERC20(info.token1).symbol();\\n    \\n    (uint reserve0, uint reserve1, ) = pair.getReserves();\\n    info.reserve0 = reserve0;\\n    info.reserve1 = reserve1;\\n    return info;\\n  }\\n}\",\"keccak256\":\"0x95e62fb330cde66818df838cac9498d734b9136d1029841e03f68d361b582e20\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IZEROPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IZEROPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x039986bdd7dfad29650e15715db0bff0ca197fa0255011719ec0a81791d0a161\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a00806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dc0a422914610030575b600080fd5b61004a60048036038101906100459190610603565b610060565b6040516100579190610823565b60405180910390f35b6100686104d5565b60008290506100756104d5565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156100bb57600080fd5b505afa1580156100cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906100f89190610655565b81600001819052508173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561014657600080fd5b505afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e91906106e5565b8160200181815250508173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101cd57600080fd5b505afa1580156101e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610205919061062c565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba919061062c565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561033b57600080fd5b505afa15801561034f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103789190610655565b8160800181905250806060015173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156103ca57600080fd5b505afa1580156103de573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104079190610655565b8160a001819052506000808373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610696565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150818360c0018181525050808360e001818152505082945050505050919050565b6040518061010001604052806060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160008152602001600081525090565b6000813590506105558161096e565b92915050565b60008151905061056a8161096e565b92915050565b600082601f83011261058157600080fd5b815161059461058f82610876565b610845565b915080825260208301602083018583830111156105b057600080fd5b6105bb838284610928565b50505092915050565b6000815190506105d381610985565b92915050565b6000815190506105e88161099c565b92915050565b6000815190506105fd816109b3565b92915050565b60006020828403121561061557600080fd5b600061062384828501610546565b91505092915050565b60006020828403121561063e57600080fd5b600061064c8482850161055b565b91505092915050565b60006020828403121561066757600080fd5b600082015167ffffffffffffffff81111561068157600080fd5b61068d84828501610570565b91505092915050565b6000806000606084860312156106ab57600080fd5b60006106b9868287016105c4565b93505060206106ca868287016105c4565b92505060406106db868287016105ee565b9150509250925092565b6000602082840312156106f757600080fd5b6000610705848285016105d9565b91505092915050565b610717816108c2565b82525050565b6000610728826108a6565b61073281856108b1565b9350610742818560208601610928565b61074b8161095d565b840191505092915050565b6000610100830160008301518482036000860152610774828261071d565b91505060208301516107896020860182610814565b50604083015161079c604086018261070e565b5060608301516107af606086018261070e565b50608083015184820360808601526107c7828261071d565b91505060a083015184820360a08601526107e1828261071d565b91505060c08301516107f660c0860182610814565b5060e083015161080960e0860182610814565b508091505092915050565b61081d8161090e565b82525050565b6000602082019050818103600083015261083d8184610756565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561086c5761086b61095b565b5b8060405250919050565b600067ffffffffffffffff8211156108915761089061095b565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006108cd826108ee565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60005b8381101561094657808201518184015260208101905061092b565b83811115610955576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b610977816108c2565b811461098257600080fd5b50565b61098e816108d4565b811461099957600080fd5b50565b6109a58161090e565b81146109b057600080fd5b50565b6109bc81610918565b81146109c757600080fd5b5056fea2646970667358221220d99c5d85a247dc72eae268e3cf43ce59c2ea3255d40c7b5d7935cb0bf0efdbd864736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dc0a422914610030575b600080fd5b61004a60048036038101906100459190610603565b610060565b6040516100579190610823565b60405180910390f35b6100686104d5565b60008290506100756104d5565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156100bb57600080fd5b505afa1580156100cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906100f89190610655565b81600001819052508173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561014657600080fd5b505afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e91906106e5565b8160200181815250508173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101cd57600080fd5b505afa1580156101e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610205919061062c565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba919061062c565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561033b57600080fd5b505afa15801561034f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103789190610655565b8160800181905250806060015173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156103ca57600080fd5b505afa1580156103de573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104079190610655565b8160a001819052506000808373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610696565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150818360c0018181525050808360e001818152505082945050505050919050565b6040518061010001604052806060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160008152602001600081525090565b6000813590506105558161096e565b92915050565b60008151905061056a8161096e565b92915050565b600082601f83011261058157600080fd5b815161059461058f82610876565b610845565b915080825260208301602083018583830111156105b057600080fd5b6105bb838284610928565b50505092915050565b6000815190506105d381610985565b92915050565b6000815190506105e88161099c565b92915050565b6000815190506105fd816109b3565b92915050565b60006020828403121561061557600080fd5b600061062384828501610546565b91505092915050565b60006020828403121561063e57600080fd5b600061064c8482850161055b565b91505092915050565b60006020828403121561066757600080fd5b600082015167ffffffffffffffff81111561068157600080fd5b61068d84828501610570565b91505092915050565b6000806000606084860312156106ab57600080fd5b60006106b9868287016105c4565b93505060206106ca868287016105c4565b92505060406106db868287016105ee565b9150509250925092565b6000602082840312156106f757600080fd5b6000610705848285016105d9565b91505092915050565b610717816108c2565b82525050565b6000610728826108a6565b61073281856108b1565b9350610742818560208601610928565b61074b8161095d565b840191505092915050565b6000610100830160008301518482036000860152610774828261071d565b91505060208301516107896020860182610814565b50604083015161079c604086018261070e565b5060608301516107af606086018261070e565b50608083015184820360808601526107c7828261071d565b91505060a083015184820360a08601526107e1828261071d565b91505060c08301516107f660c0860182610814565b5060e083015161080960e0860182610814565b508091505092915050565b61081d8161090e565b82525050565b6000602082019050818103600083015261083d8184610756565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561086c5761086b61095b565b5b8060405250919050565b600067ffffffffffffffff8211156108915761089061095b565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006108cd826108ee565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60005b8381101561094657808201518184015260208101905061092b565b83811115610955576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b610977816108c2565b811461098257600080fd5b50565b61098e816108d4565b811461099957600080fd5b50565b6109a58161090e565b81146109b057600080fd5b50565b6109bc81610918565b81146109c757600080fd5b5056fea2646970667358221220d99c5d85a247dc72eae268e3cf43ce59c2ea3255d40c7b5d7935cb0bf0efdbd864736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}